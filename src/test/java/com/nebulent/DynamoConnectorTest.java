/**
 * This file was automatically generated by the Mule Development Kit
 */
package com.nebulent;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.mule.api.MuleEvent;
import org.mule.construct.Flow;
import org.mule.tck.FunctionalTestCase;
import org.mule.tck.AbstractMuleTestCase;
import org.springframework.util.Assert;

import org.junit.Test;

import com.amazonaws.services.dynamodb.datamodeling.PaginatedQueryList;
import com.amazonaws.services.dynamodb.datamodeling.PaginatedScanList;
import com.amazonaws.services.dynamodb.model.AttributeValue;
import com.amazonaws.services.dynamodb.model.Key;
import com.nebulent.dynamo.model.DataModel;

public class DynamoConnectorTest extends FunctionalTestCase {
	@Override
	protected String getConfigResources() {
		return "mule-config.xml";
	}

	@Test
	public void testFlow() throws Exception {
		/*loadTestFlow();
		queryTestFlow();
		scanTestFlow();
		countTestFlow();*/
		saveTestFlow();
		/*deleteTestFlow();*/
		/*marshalTestFlow();*/
	}
	
	public void marshalTestFlow() throws Exception {
		System.out.println("testing marshalIntoObjects() ");
		Flow flow = lookupFlowConstruct("marshalTestFlow");
		MuleEvent event = null;
		MuleEvent responseEvent = null;
		
		List<Map<String,AttributeValue>> itemAttributes = new ArrayList<Map<String,AttributeValue>>();
		Map<String,AttributeValue> attribute = new HashMap<String, AttributeValue>();
		attribute.put("rangeID", new AttributeValue().withN("12.54"));
		attribute.put("PassKeyID", new AttributeValue().withS("d03033ed-be1a-488e-b831-06433dcaafcb"));
		attribute.put("message", new AttributeValue().withS("message...."));
		itemAttributes.add(attribute);
		event = AbstractMuleTestCase
				.getTestEvent(itemAttributes);
			responseEvent = flow.process(event);
			Assert.notEmpty((List) responseEvent.getMessage().getPayload());
	}
	
	public void deleteTestFlow() throws Exception {
		System.out.println("testing delete() ");
		Flow flow = lookupFlowConstruct("deleteTestFlow");
		MuleEvent event = null;
		MuleEvent responseEvent = null;
		DataModel model = new DataModel();
		model.setPassKeyID("225a1b38-2fa6-474c-890f-c6f2baf18b15");
		model.setRangeID((double)1);
		event = AbstractMuleTestCase
				.getTestEvent(model);
		try{
			responseEvent = flow.process(event);
		} catch(Exception ex) {
			System.out.println(ex.getMessage());
		}
	}
	
	public void saveTestFlow() throws Exception {
		System.out.println("testing save() ");
		Flow flow = lookupFlowConstruct("saveTestFlow");
		MuleEvent event = null;
		MuleEvent responseEvent = null;
		DataModel model = new DataModel();
		model.setPassKeyID("aaaaaaaaaa-aaaaaaa-aaaaaaaaa-aaaaaa");
		model.setRangeID((double)10);
		event = AbstractMuleTestCase
				.getTestEvent(model);
		try{
			responseEvent = flow.process(event);
		} catch(Exception ex) {
			System.out.println(ex.getMessage());
		}
		
	}
	
	public void countTestFlow() throws Exception {
		System.out.println("testing count() ");
		Flow flow = lookupFlowConstruct("countTestFlow");
		MuleEvent event = null;
		MuleEvent responseEvent = null;
		event = AbstractMuleTestCase
				.getTestEvent("6cea519d-8e3e-4559-842c-d8302eb46446");
		responseEvent = flow.process(event);
		Assert.notNull(responseEvent.getMessage().getPayload());
		System.out
				.println("-----------------------------------------------------------");
		System.out.println(responseEvent.getMessage().getPayload());
		System.out
				.println("-----------------------------------------------------------");
	}
	
	public void loadTestFlow() throws Exception {
		System.out.println("testing load() ");
		Flow flow = lookupFlowConstruct("loadTestFlow");
		MuleEvent event = null;
		MuleEvent responseEvent = null;
		event = AbstractMuleTestCase
				.getTestEvent("6cea519d-8e3e-4559-842c-d8302eb46446");
		responseEvent = flow.process(event);
		Assert.notNull(responseEvent.getMessage().getPayload());
		System.out
				.println("-----------------------------------------------------------");
		System.out.println(responseEvent.getMessage().getPayload());
		System.out
				.println("-----------------------------------------------------------");
	}

	public void queryTestFlow() throws Exception {
		System.out.println("testing query() ");
		Flow flow = lookupFlowConstruct("queryTestFlow");

		Key startKey = new Key(
				new AttributeValue()
						.withS("603a9ffa-fab6-47db-8ba9-64dfafae9c24"),
				new AttributeValue().withN("1"));
		MuleEvent event = null;
		MuleEvent responseEvent = null;
		event = AbstractMuleTestCase.getTestEvent(startKey);
		responseEvent = flow.process(event);
		System.out
				.println("-----------------------------------------------------------");
		System.out.println(responseEvent.getMessage().getPayload());
		PaginatedQueryList<DataModel> records = (PaginatedQueryList<DataModel>) responseEvent.getMessage().getPayload();
		Assert.notEmpty(records);
		for(DataModel record:records) {
			System.out.println(record);
		}
		System.out
				.println("-----------------------------------------------------------");
	}

	public void scanTestFlow() throws Exception {
		System.out.println("testing scan() ");
		Flow flow = lookupFlowConstruct("scanTestFlow");

		Key startKey = new Key(
				new AttributeValue()
						.withS("6fc086c4-224e-4416-9513-76a8b18b8859"),
				new AttributeValue().withN("1"));
		MuleEvent event = null;
		MuleEvent responseEvent = null;
		event = AbstractMuleTestCase.getTestEvent(startKey);
		responseEvent = flow.process(event);
		System.out
				.println("-----------------------------------------------------------");
		System.out.println(responseEvent.getMessage().getPayload());
		PaginatedScanList<DataModel> records = (PaginatedScanList<DataModel>) responseEvent.getMessage().getPayload();
		Assert.notEmpty(records);
		for(DataModel record:records) {
			System.out.println(record);
		}
		System.out
				.println("-----------------------------------------------------------");
	}
	
	/**
	 * Retrieve a flow by name from the registry
	 * 
	 * @param name
	 *            Name of the flow to retrieve
	 */
	protected Flow lookupFlowConstruct(String name) {
		return (Flow) AbstractMuleTestCase.muleContext.getRegistry()
				.lookupFlowConstruct(name);
	}
}
